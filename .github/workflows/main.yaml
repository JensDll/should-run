name: Should run reuseable workflow

on:
  workflow_call:
    inputs:
      projects:
        description: The projects to match against
        type: string
        required: true
    outputs:
      result:
        description: JSON result - One boolean property for each input project
        value: ${{ jobs.main.outputs.result }}

jobs:
  main:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ toJSON(steps.changes.outputs) }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Running pre conditions
        id: pre
        run: |
          if [[ ${{ github.event_name }} == "push" ]]
          then
            echo "::set-output name=base_sha::${{ github.event.before }}"
            echo "::set-output name=head_sha::${{ github.event.after }}"
          elif [[ ${{ github.event_name }} == "pull_request" ]]
          then
            echo "::set-output name=base_sha::${{ github.event.pull_request.base.sha }}"
            echo "::set-output name=head_sha::${{ github.event.pull_request.head.sha }}"
          else
            echo "::error ::Unsupported event name \"${{ github.event_name }}\" ... Supported values are \"push, pull_request\""
          fi

      - name: Checking out the repository
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.pre.outputs.head_sha }}

      - name: Debug information
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
          STEPS_CONTEXT: ${{ toJSON(steps) }}
          NEEDS_CONTEXT: ${{ toJSON(needs) }}
        run: env

      - name: Fetching commits of branch and determining changes
        id: changes
        # This script will fetch all commits of the current branch,
        # determine what projects have changed, and write the result
        # to the GitHub action's output parameter.
        run: |
          shopt -s extglob

          declare -r inputs="${{ inputs.projects }}"
          declare -r projects=${inputs//+([ ,])/|}
          declare -r pattern=".*/($projects)/.*"

          IFS="|"
          for project in $projects
          do
            echo "::set-output name=$project::false"
          done
          unset IFS

          git fetch --depth=1 origin ${{ github.base_ref }}

          echo "Checking for changes ..."
          echo "The pattern is \"$pattern\""

          while read -r line
          do
            line="/$line"
            if [[ $line =~ $pattern ]]
            then
              echo "Match found in \"$line\" ... The match was \"${BASH_REMATCH[1]}\""
              echo "::set-output name=${BASH_REMATCH[1]}::true"
            fi
          done < <(git diff --name-only ${{ steps.pre.outputs.base_sha }} HEAD)
