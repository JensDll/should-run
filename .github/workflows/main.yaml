name: Should run reuseable workflow

on:
  workflow_call:
    inputs:
      projects:
        description: The projects to match against
        required: true
        type: string
      diff-filter:
        description: Filter to use on git diff
        required: false
        type: string
        default: d
    outputs:
      result:
        description: JSON result - One boolean property for each input project
        value: ${{ jobs.main.outputs.result }}

jobs:
  main:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ toJSON(steps.changes.outputs) }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Determining head commit
        id: determine_head
        run: |
          case "${{ github.event_name }}" in
          push)
            echo "::set-output name=sha::${{ github.event.after }}"
            echo "::set-output name=fetch_depth::1"
            ;;
          pull_request)
            echo "::set-output name=sha::${{ github.event.pull_request.head.sha }}"
            echo "::set-output name=fetch_depth::$((${{ github.event.pull_request.commits }} + 1))"
            ;;
          *)
            echo "::error ::Unsupported event name \"${{ github.event_name }}\" - Supported values are \"push, pull_request\""
            ;;
          esac

      - name: Checking out the head commit
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.determine_head.outputs.sha }}
          fetch-depth: ${{ steps.determine_head.outputs.fetch_depth }}

      - name: Determining base commit
        id: determine_base
        run: |
          case "${{ github.event_name }}" in
          push)
            git fetch --no-tags --no-recurse-submodules --depth=1 origin ${{ github.event.before }}
            echo "::set-output name=sha::${{ github.event.before }}"
            ;;
          pull_request)
            echo "::set-output name=sha::$(git rev-parse shallow)"
            ;;
          esac

      - name: Determining changes
        id: changes
        run: |
          shopt -s extglob

          declare -r inputs="${{ inputs.projects }}"
          declare -r projects=${inputs//+([ ,])/|}
          declare -r pattern=".*/($projects)/.*"

          declare -r old_IFS=$IFS
          IFS="|"
          for project in $projects
          do
            echo "::set-output name=$project::false"
          done
          IFS=$old_IFS

          echo "The pattern is: $pattern"

          while read -r line
          do
            line="/$line"
            echo "Git diff: $line"
            if [[ $line =~ $pattern ]]
            then
              echo "Match found! The match was: ${BASH_REMATCH[1]}"
              echo "::set-output name=${BASH_REMATCH[1]}::true"
            fi
          done < <(git diff --name-only --diff-filter=${{ inputs.diff-filter }} ${{ steps.determine_base.outputs.sha }} HEAD)
